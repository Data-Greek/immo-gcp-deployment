# -*- coding: utf-8 -*-
"""
Created on Sat Aug  1 13:09:07 2020

@author: TBEL972
"""
## CHARGEMENT DES LIBRAIRIES
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import base64
from io import BytesIO
from xgboost import XGBRegressor
from PIL import Image
import xlsxwriter


## Chargement du mod√®le (joblib)
model = joblib.load('immo_model.pkl')

## Fonction de pr√©diction
def predict(input_df):
    prediction = model.predict(input_df)
    return prediction

## CR√âATION DE L'APPLICATION
def app():
    
    ## En-t√™te
    html_template = """
    <div style = "background-color : #6495ED ; padding:15px">
    <h2 style="color : white; text-align : center; ">Estimateur du prix de l'immobilier</h2>
    
    """
    st.markdown(html_template, unsafe_allow_html=True)
    
    st.write("")
    
    #st.header("Estimateur de prix de bien foncier pour le compte d'agence immobili√®re") 
    st.write(" Cet outil de d√©monstration se base sur un jeu de donn√©e ayant permis la cr√©ation d'une interface de calcul en temps r√©el visant √† estimer les prix de biens immobiliers afin de les acqu√©rir ou les vendre au juste prix, et anticiper leur valorisation sur le march√©.")
             
    ## Cr√©ation la sidebar
    sidebar_selection = st.sidebar.selectbox("Type de pr√©diction", ("Pr√©diction en temps r√©el", "Pr√©diction par lot (batch)"))
    
    ## Personnalisation de la sidebar
    
    st.sidebar.info("Cette application est une d√©monstration, con√ßue par la team data science de l'**Agence Marketic**")
    
    st.sidebar.success('Vous souhaitez concevoir **votre propre interface de pr√©diction**, adapt√©e aux r√©alit√©s de votre terrain/de votre public ? Alors, retrouvez-nous sur **http://www.agence-marketic.fr**')
    
    image = Image.open('real_estate.jpg')
    
    st.sidebar.image(image, use_column_width=True)
    
    ## PREDICTION EN TEMPS REEL
    
    if sidebar_selection == "Pr√©diction en temps r√©el":
        
        st.write("Veuillez renseigner les param√®tres suivants afin d'obtenir une estimation de l'intelligence artificielle pour le prix du bien que vous souhaitez estimer üè†.")
        
        anciennete = st.number_input("Anciennet√© du bien immobilier", min_value=1, max_value=100, value=34)
        nombre_pieces	= st.number_input("Nombre de pi√®ces", min_value=1, max_value=15, value=2)
        nombre_chambres = st.number_input("Nombre de chambres ", min_value=1, max_value=15, value=3)
        population_en_millier = st.text_input("Nombre d'habitants de la localit√© o√π est implant√© le bien foncier", "20000")
        nombre_foyer = st.text_input("Nombre de foyers r√©sidant dans la localit√© o√π est vendu le bien foncier ", "4000")
        revenue_moyen_habitants = st.text_input(" Revenu moyen des r√©sidents de la localit√© ", "25000")
        proximite_mer = st.selectbox("Le bien immobilier se situe : ",["Non loin des c√¥tes", "A l'interieur des terres", "En bord de mer", "Dans une marina"])
       
       ## cr√©ation d'un dictionnaire + dataframe
       
       
        data = {'anciennete' : anciennete, 
               'nombre_pieces':nombre_pieces,
               'nombre_chambres':nombre_chambres,
               'population_en_millier':population_en_millier,
               'nombre_foyer':nombre_foyer,
               'revenue_moyen_habitants':revenue_moyen_habitants,
               'proximite_mer':proximite_mer
               }
       
       
        input_df = pd.DataFrame(data, index=[0])
       
        resultat = ""
    
        if st.button("Pr√©diction"):
        
            resultat = model.predict(input_df)
            st.success("Le bien foncier est estim√© √† **{}‚Ç¨**".format(resultat))
            
        
        
    ## TRAITEMENT PAR LOT
    
    if sidebar_selection == "Pr√©diction par lot (batch)":
        
        st.write("""Pour servir de d√©monstration, veuillez t√©l√©charger puis charger le fichier ci-dessous, afin d'obtenir une estimation par lot de l'intelligence artificielle pour le prix du bien que vous souhaitez estimer üè†.""")
        
        demo = st.markdown("""[1Ô∏è - T√©l√©charger le fichier de d√©monstration](https://drive.google.com/uc?export=download&id=1C0x6Gb9ieIsVArz29ci5dW8ekOuz7_02) ‚úÖ""")
        batch = st.file_uploader("Ins√©rez le fichier de d√©monstration en cliquant sur ''browse files''", type="csv")
        
        ## g√©n√©ration de la pr√©diction
        if batch is not None:
            df = pd.read_csv(batch)
            prediction = model.predict(df)
            
            ## mise en forme
            pred = pd.Series(prediction.reshape(df.shape[0],))
            concat = pd.concat([df,pred], axis=1)
            concat.columns = ['anciennete','nombre_pieces','nombre_chambres','population_en_millier','nombre_foyer','revenue_moyen_habitants','proximite_mer', 'Prediction']
            final = st.write(concat)
            
            ## T√©l√©charger le fichier de pr√©diction
            st.write("")
            st.write("2 - T√©l√©charger le fichier de pr√©diction ‚¨áÔ∏è")
            

            def to_excel(concat):
                output = BytesIO()
                writer = pd.ExcelWriter(output, engine='xlsxwriter')
                concat.to_excel(writer, sheet_name='Sheet1')
                writer.save()
                processed_data = output.getvalue()
                return processed_data

            def get_table_download_link(concat):
                val = to_excel(concat)
                b64 = base64.b64encode(val)
                return f'<a href="data:application/octet-stream;base64,{b64.decode()}" download="Pr√©dictions_Agence Marketic.xlsx">Lancer le t√©l√©chargement</a>' 

           
            st.markdown(get_table_download_link(concat), unsafe_allow_html=True)
        
if __name__=='__main__':
    app()
